machine:
  network:
    interfaces:
    - deviceSelector:
        physical: true
      dhcp: true
      vip:
        ip: 192.168.100.130    # # `interfaces` is used to define the network interface configuration.
  
  kubelet:
    # 
    #  Metrics Server
    # 
    extraArgs:
      rotate-server-certificates: true


cluster:
  # 
  # Metrics server
  # 
  extraManifests:
    - https://raw.githubusercontent.com/alex1989hu/kubelet-serving-cert-approver/main/deploy/standalone-install.yaml
    - https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

  # allowSchedulingOnControlPlanes: true

  # 
  # Cilium
  # 
  network:
    cni:
      name: none
  proxy:
    disabled: true
  inlineManifests:
    - name: cilium
      contents: |
        ---
        # Source: cilium/templates/cilium-secrets-namespace.yaml
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        ---
        # Source: cilium/templates/cilium-agent/serviceaccount.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: "cilium"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-envoy/serviceaccount.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: "cilium-envoy"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-operator/serviceaccount.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: "cilium-operator"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-ca-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: cilium-ca
          namespace: kube-system
        data:
          ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5ZRjU3eHdWd0wwUzRGbkhKMnd3cnN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURVeE56RTFORFV4T0ZvWERUSTRNRFV4TmpFMQpORFV4T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFsMWswdFhGcmhwTmxJWFZjQ1JKRFl3RGc2ZmxCMVRzb1BmUG5jajVzL085ZzQ4aTQKNEJ2NTYzKzFlWXVnemJKTjlOazJVWUhoSGdzek5Qbm1NRElOY2RtUnNTa0FpYVRHTHpZbmc5Z0MzemNBYmVaRgp1dE9CRVBFeDVvRlIxVWV0N05NTzJXWThUQTdGWXdGcE9GUFFQRXVBYlZaV0hPdkdqUVpzeFpBZXJ1RW03YnhhClA5RnBvYmNxc29UUTdZd01HWG5rY1JXdWJwaWpBTTg4THF2eFA0Tm9YaVkzRmI3bmhOYzNWQUJqOUJmR204SEwKdlg5UU4yVjJrUnRmMmZ4SnhBdHdPUER2ckZJYUJKYmJ3ZTRZcnFOVVBscU8vSDFFS1RuVE0vNHl1Qm1QL2dGVQo3bTUvaW1rUXBCSzgzM1JaYlYrRURNbGRHQzZ5QkdrRFUzM2QwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFFpN3RMZDZZWTZhSm5YSTZIb1pQenU2VHgrTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWdiemFURlYvdFBLVjA4TExMbm4xbXF1dmZzTndWTnJqUVdCNHU0WGRwbmMxdXdzZ3ZZbUlEClpJOGpMWXV5YitDYUdyLytENUtzVmFGdkVyYUZiaGU0ZmhhKy9SWm5PYnpia3lGUmhDWmFRNnZrdE5jN2JKWWgKRUJuUndKd3I5dFU3RGNJdzhHMXBLbmpQUU5iUW5OeUhtOXY1ZWJHT0pwQWxFZFhZTWw2Z244K0dVVG5Ma0FSegpQeW9BS3haU1NDT29INExHb2p3Y3JDMWNYRXFCaCtqdEJ1RUJvb0lnWVJXSmorUUNZVDB5RlZLRlE2eGdyYzVmCktYVHdtVVRDWlJXUWVmeCtXaVRVNUFFRWJOSVdKTmJmY1YvTzFjYW0zbkdpcCtmaXhRTDJkLzY2WGUwVUFKR3gKTmlESG5ic3dhdVhENUZNeG5rYjlBb3Z3K3FpdGtTK1cKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
          ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbDFrMHRYRnJocE5sSVhWY0NSSkRZd0RnNmZsQjFUc29QZlBuY2o1cy9POWc0OGk0CjRCdjU2MysxZVl1Z3piSk45TmsyVVlIaEhnc3pOUG5tTURJTmNkbVJzU2tBaWFUR0x6WW5nOWdDM3pjQWJlWkYKdXRPQkVQRXg1b0ZSMVVldDdOTU8yV1k4VEE3Rll3RnBPRlBRUEV1QWJWWldIT3ZHalFac3haQWVydUVtN2J4YQpQOUZwb2JjcXNvVFE3WXdNR1hua2NSV3VicGlqQU04OExxdnhQNE5vWGlZM0ZiN25oTmMzVkFCajlCZkdtOEhMCnZYOVFOMlYya1J0ZjJmeEp4QXR3T1BEdnJGSWFCSmJid2U0WXJxTlVQbHFPL0gxRUtUblRNLzR5dUJtUC9nRlUKN201L2lta1FwQks4MzNSWmJWK0VETWxkR0M2eUJHa0RVMzNkMFFJREFRQUJBb0lCQUFreGpRY2NqYWlPR1kyUAp3SGg0bUlsU0MxZUxJWm1mVDFGOEdHb1RLckd1cE5jUllWR1R3WG14dDBkYjJQZkZ4Z0NDbFU4Y01aMk9scHk0Ck5XaG1FZlVCZjEwZ25YeSsrcDd4ampMdkV6V1Y5THU0U2pJUUdQMzdlTW1FdjREU0t0bUE5SnoySGVHTTRDYWsKZGt6S29wS1hENFVVd29SZE9pRms2NFNRdlp4bnp2aVUvc1docVVDYTN1TXFzMitibmI1Qjk4QndRdmpwL3I0MApzMHg5TjA3TlNTaFBXT2RCOTc2V05FZU1pM202Q2lXSXpZZDNKT0RnQ2kzbStwQUcrSTdUUlFPbFBUK3AwdjRmCkFiZmRMY2ZQTE5ubjYrelVxSFAvMmRra2tPc2ZJOUE0QUtiL1lEQnp5VzZ2UlVNL0VESnE4RnFDdXNLajc0STkKTE5XRGxyRUNnWUVBeEhrV2hHMytHeTRSbk9UMVNYVEg0c2tpRDJBd21ONGxHOHNOdVBwTDVoK3dFZUxVTUpSbgpTMzNiQldNUDZmdTBmVCtsdjJVai96UVJ5SE13NDBXYktFNWVud1FWdzYvK2pXWFFiRDVwbXQ5UldWWGZyazJxClpjSHFHalAxZ3F6Njh2Y25GK0hNZGxDeDBjcytWY0x6b29KQXU2VW12TWlhMitIbE1sampVSVVDZ1lFQXhUUW0KenlmbkRrSCt0c05jMFZhK3pTd1g2WDB2TTdaVVREcWRWeVNteXVITUFuWGk1RkgxRitpQjlZS0p4M0RjOWVzeApROUxRdDFKZEVMTnFmU2h3eUpwR3BXdC8zV2tnWW1BRFY5dU83b20rblNWRFpKYmRWUkd6aU5YemwyODlTcEJwCjU3ZE1QWlRHRzROU2tzNUpVYXUwMG5qTXFpQTBOR1U0VVNqZ1g5MENnWUJUczRKMFNLZkl6SWVVWDdaZjVQQ0QKSFV6MVgvVlVLcytFVjYwdzhQRUV5TnNwdzRqQ2FYYllJblg4aFlkeUYxbDlRbkJLYWJ3OExPS21rdXh3NW1hRApkVis2UHZOR3V1T25PWWpobEhWSkZYcUNwS0wyanYvWStoUFJ0ZkVTQ3IrZVlzeTB6KzFiT21XSEN4OHpTaXFoClFQeHk5SmpjTkZwRThxZkNHenc4UVFLQmdBNDN2VmlRSXV0M1BKc0dxTWw2L0pTa1NqRU9Vbm5pK2w3b2x2RnkKZGdnSWtZSFg1L3pZSDlpU2JkUTZqaDV2OTY1UFA2VUpMUDBhbGhVZktsMU5yaHY0YTRGL3A1OVo5ZmpCdlZ2MwpPMjNkUm4zajh1RHNzNVp2aVVjalRjV3NRbm4rd1hQd1ZqSFdhUllRdU1KVzF4aHBUY2NpNkhhWGpjdjlSRHN0CnZFZU5Bb0dCQUl6WUZjcGpZYW1pYVYxcU92V2ljVWhLbW0ySWRPZnM4Uy9ScUh0czB3ajhCcmpTaE5tbFZUaEsKQ3QveDhOdG9uVVJJb09UbktHVTRUcnRnb2Y4R3pEcGM4U3VrM1FOQmV1bitXVDVMUXFNZEZqR1FIV1ZQSjZPcQpSb2xYWXAzMllGdEZ6WGZab2tzNnE1MjRJeVpNRmdoZC9uaFFzV3NGeDk3cXcwam9pV29kCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
        ---
        # Source: cilium/templates/hubble/tls-helm/server-secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: hubble-server-certs
          namespace: kube-system
        type: kubernetes.io/tls
        data:
          ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5ZRjU3eHdWd0wwUzRGbkhKMnd3cnN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURVeE56RTFORFV4T0ZvWERUSTRNRFV4TmpFMQpORFV4T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFsMWswdFhGcmhwTmxJWFZjQ1JKRFl3RGc2ZmxCMVRzb1BmUG5jajVzL085ZzQ4aTQKNEJ2NTYzKzFlWXVnemJKTjlOazJVWUhoSGdzek5Qbm1NRElOY2RtUnNTa0FpYVRHTHpZbmc5Z0MzemNBYmVaRgp1dE9CRVBFeDVvRlIxVWV0N05NTzJXWThUQTdGWXdGcE9GUFFQRXVBYlZaV0hPdkdqUVpzeFpBZXJ1RW03YnhhClA5RnBvYmNxc29UUTdZd01HWG5rY1JXdWJwaWpBTTg4THF2eFA0Tm9YaVkzRmI3bmhOYzNWQUJqOUJmR204SEwKdlg5UU4yVjJrUnRmMmZ4SnhBdHdPUER2ckZJYUJKYmJ3ZTRZcnFOVVBscU8vSDFFS1RuVE0vNHl1Qm1QL2dGVQo3bTUvaW1rUXBCSzgzM1JaYlYrRURNbGRHQzZ5QkdrRFUzM2QwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFFpN3RMZDZZWTZhSm5YSTZIb1pQenU2VHgrTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWdiemFURlYvdFBLVjA4TExMbm4xbXF1dmZzTndWTnJqUVdCNHU0WGRwbmMxdXdzZ3ZZbUlEClpJOGpMWXV5YitDYUdyLytENUtzVmFGdkVyYUZiaGU0ZmhhKy9SWm5PYnpia3lGUmhDWmFRNnZrdE5jN2JKWWgKRUJuUndKd3I5dFU3RGNJdzhHMXBLbmpQUU5iUW5OeUhtOXY1ZWJHT0pwQWxFZFhZTWw2Z244K0dVVG5Ma0FSegpQeW9BS3haU1NDT29INExHb2p3Y3JDMWNYRXFCaCtqdEJ1RUJvb0lnWVJXSmorUUNZVDB5RlZLRlE2eGdyYzVmCktYVHdtVVRDWlJXUWVmeCtXaVRVNUFFRWJOSVdKTmJmY1YvTzFjYW0zbkdpcCtmaXhRTDJkLzY2WGUwVUFKR3gKTmlESG5ic3dhdVhENUZNeG5rYjlBb3Z3K3FpdGtTK1cKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
          tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRQVhjR2FmVnJIMDJBTjBqd3p3ZkQ4VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TlRFM01UVTBOVEU0V2hjTk1qWXdOVEUzTVRVMApOVEU0V2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBM2cxdnJ2ZXdVa0VPTzhGdFR5SjMKbW1OcFpBNVNSaWtnbk9LVndtNEpyU0NPZERxUFIwWEp2by9mdG10alJNNkUrdTgrTitlZGJQSndqYTZOS0l6ZQowQkNxbjFmRFFmVDVaQ1ZCWVVLRnM5T0RPSGQ3RWV0ODRqNXdaZjlxc0JONjlZN1BCMFZiYjNFUlBuandnanEzCmRSVlIxdStndTBuRFNQVmQvNDFZdTRiRCtmaFNpTmt4ZGtnczVKN292Qnd1aEduTER2dFlyWFJIMmFkMEFacGMKSjdRWTVxUjRCUnprTmxKSnUwbElCa1E0L2lrZGYyZDVsR28xOHZpSE9NS0J4ZG1EWnJDMDVhWlZtdzNFY2xObApxNy9rSTgzVGgrK2xWRjRKMDdWU2lWQ3ZsR1dRM3RJS0daS1lWTTFtY1hkb2N0ZitqUlhtbkdOVDJnZ0ZEOWlsClpRSURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSMEl1N1MzZW1HT21pWgoxeU9oNkdUODd1azhmakFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBZE1wSjdWRDJqZHRKNjZnSlhUZmwyWndpaFNueVoKZnJOSnNJejI3cHdJQzZiTW9hdW5XTWtBajQ5emVsYUowcVhPZVE2eE4zOXhPMEdTWXRvTzZGYkNZeVRXbnZoQgpLaW84YUtRcnJKWjdBZmVXQXRqK3Vqb1ZPTlZwY1FnWUkxUkpwK01kOHAvZFVpK2tiRHQyZTJsdG11ZWRNeVkyClN3b0sxUXprYTB2SmZqcXRpZ21nSWFJSkRKWldxTlpnSG1zQ3NwZUhod1VvNGxudDlObllOc0JDYWVDVDB5dFUKWWowemZHVTY5YWsyY0FBcEVtZkZCdlVjZXh4dFBIS3h2ZHJPVmgyK0IrZnUrK3hYY3A1N25FVWNva3dZYlJHcgpqS2JKTVF6Wm5sbWhxMnpLNjQ4VFExNTJpMk95TU5kYXdhT0xJRFExa0gzVjc0b1lPZy9MVGxxZAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM2cxdnJ2ZXdVa0VPTzhGdFR5SjNtbU5wWkE1U1Jpa2duT0tWd200SnJTQ09kRHFQClIwWEp2by9mdG10alJNNkUrdTgrTitlZGJQSndqYTZOS0l6ZTBCQ3FuMWZEUWZUNVpDVkJZVUtGczlPRE9IZDcKRWV0ODRqNXdaZjlxc0JONjlZN1BCMFZiYjNFUlBuandnanEzZFJWUjF1K2d1MG5EU1BWZC80MVl1NGJEK2ZoUwppTmt4ZGtnczVKN292Qnd1aEduTER2dFlyWFJIMmFkMEFacGNKN1FZNXFSNEJSemtObEpKdTBsSUJrUTQvaWtkCmYyZDVsR28xOHZpSE9NS0J4ZG1EWnJDMDVhWlZtdzNFY2xObHE3L2tJODNUaCsrbFZGNEowN1ZTaVZDdmxHV1EKM3RJS0daS1lWTTFtY1hkb2N0ZitqUlhtbkdOVDJnZ0ZEOWlsWlFJREFRQUJBb0lCQVFDVVUwTlVDODJ5MUJQdQo1SURneUhRK0k4T2xlMCtINERjUnRPVTJrQXhVb2hlbUdldlZQdy9KQkEvNnFYY1E0aWEvL0FtQ2pHdUM5OXNwCk9QeS9wb0c3V0RhdzQ0M2hSQU5HMnYvMk9OcFl5YU93bDFjVkhFazZVMXovTlFNT0JLVXczQ2o4Z1Y3WGJSNkkKclg1eWIwaFdwRndiaDh2RTd6dk1RMko3cnU0anJGNE9yNmpoWFBxL3V0cGZXZHVDcEhTTFhZODBkeUkyRFpkdQpEUWpteVV5Z3p4MjNjOVQxUnZ1eXZsQ2VzaDFyZWVZRkE0dWpsUHFQWWljcWowYzRQUnB5aG9OaWlZRUtoRjIzCnJQTW1EbnR1ZUVLRk40cEJWYkNlcldqaGVaUVdKODRZdUlmQlVWM0VUVlhYZG0xbTdVMk4zZXRXQ2NOb05vNEgKZ2RvQ1E5Y0JBb0dCQU9hZEZSMXQ3bkd5WGZDUXBNUElNSkI2WDJVT1FTRFk3QStEclRnTXhmdjVTOVMwV1o5dgpoODZ6VkRpcUNHT1c0TEhiS1JZdjkzKy95bWVFMklxWk11WDZpUnJ5UUhJUktqSjBCd1ByZTNhMEd5TlN6eUtNCnRWVDJSZCtxZHBTcVlrRTFwYUpFVy9ESUhzYzlDeC9RYTZYb1grQnR6SmpYREJSSWRRSkpFdTZsQW9HQkFQWi8KRjlRaTcyYytJWUkyMFl5eU1Pc3p4cUZ0b1I4Q3pwdUJXUmtLUXJ1NzdvNzVuTElRWjRxV0xkZGE3b1R1VUZnWQo3VWJSSHZLYlBFUjFXYXBHOFBRRnZXbHkzRG5ZL3o1Nm8vUkVxUGQrWnd3THVXUlVNT1N6Z2VuVWRmRWE2Y0JiCi9HUE9acVNDaWRVOWRzeURTY0YxUXlLZWswT3dlZHd5UCtrS0hkL0JBb0dBYXUvd2VLTWZiTTJmVGd4a3V2eTcKdUdObWxQL1ZKNXd2YXNwT3FxMFJxZFJpVzVIOTlUYk1yUWJ2U1E5ZnNINm9WeEVmcmxBejNxTmJBa0hTQUFNbQpYUXFlUlVhTXA5aFp6dWVLMFVDREVmcFdrenkxSEhwUEk4VEhoZjRQMnNSZnA0bHU4eDNyM0cyUUNDZkFYdEpRCitMQVd0WVYwMkhMd0FQL1FjbXpjUUprQ2dZQlpKTXRrVDZJT3oxeGs4QmhHYnFiY1dLUXIreTY2dlZRa3p0bC8KQWNQeWl0dVNYMWs0MkUvcHdiZ2dXdVZKczduZ3Nsc1ZNa21qNlZvWlUrc3lkbWRyaUt2Z2Q4YUhNUi9WNDVwcAptMjhUMm1XLzZIbUtmQndXaVlpaEhOSHVlUkl5RzlJaDhpSVN1cGJJUkdzek9RT3ljQXJ3ZVRLKzF4S3EvSTA2ClpRczZ3UUtCZ0JTL1grZ1RPbFJnMW1EOVMwaks2eWtvaU9rUW5NNlM2dGhnSEVPMDloMlZ5WWJkQVdBRkVLaEIKcHVNS0NiWGVVSU9MZGo3T3pDVm5TTkZCNExCZm9qbXFwelRsNFRKRk1lRzd0N0xqU2Y3L0hRekZXaGhSUmFYRQpXV3pGeVRNS3U0UFBMRUhwZzlpM2d0NW5jaVJUTXFBM2dsTXJjcHV3NTVKTTJPU2k5cm1wCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
        ---
        # Source: cilium/templates/cilium-configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: cilium-config
          namespace: kube-system
        data:

          # Identity allocation mode selects how identities are shared between cilium
          # nodes by setting how they are stored. The options are "crd", "kvstore" or
          # "doublewrite-readkvstore" / "doublewrite-readcrd".
          # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
          #   These can be queried with:
          #     kubectl get ciliumid
          # - "kvstore" stores identities in an etcd kvstore, that is
          #   configured below. Cilium versions before 1.6 supported only the kvstore
          #   backend. Upgrades from these older cilium versions should continue using
          #   the kvstore by commenting out the identity-allocation-mode below, or
          #   setting it to "kvstore".
          # - "doublewrite" modes store identities in both the kvstore and CRDs. This is useful
          #   for seamless migrations from the kvstore mode to the crd mode. Consult the
          #   documentation for more information on how to perform the migration.
          identity-allocation-mode: crd

          identity-heartbeat-timeout: "30m0s"
          identity-gc-interval: "15m0s"
          cilium-endpoint-gc-interval: "5m0s"
          nodes-gc-interval: "5m0s"

          # If you want to run cilium in debug mode change this value to true
          debug: "false"
          debug-verbose: ""
          # The agent can be put into the following three policy enforcement modes
          # default, always and never.
          # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
          enable-policy: "default"
          policy-cidr-match-mode: ""
          # If you want metrics enabled in cilium-operator, set the port for
          # which the Cilium Operator will have their metrics exposed.
          # NOTE that this will open the port on the nodes where Cilium operator pod
          # is scheduled.
          operator-prometheus-serve-addr: ":9963"
          enable-metrics: "true"
          enable-envoy-config: "true"
          envoy-config-retry-interval: "15s"
          enable-gateway-api: "true"
          enable-gateway-api-secrets-sync: "true"
          enable-gateway-api-proxy-protocol: "false"
          enable-gateway-api-app-protocol: "true"
          enable-gateway-api-alpn: "true"
          gateway-api-xff-num-trusted-hops: "0"
          gateway-api-service-externaltrafficpolicy: "Cluster"
          gateway-api-secrets-namespace: "cilium-secrets"
          gateway-api-hostnetwork-enabled: "false"
          gateway-api-hostnetwork-nodelabelselector: ""
          enable-policy-secrets-sync: "true"
          policy-secrets-only-from-secrets-namespace: "true"
          policy-secrets-namespace: "cilium-secrets"

          # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
          # address.
          enable-ipv4: "true"

          # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
          # address.
          enable-ipv6: "false"
          # Users who wish to specify their own custom CNI configuration file must set
          # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
          custom-cni-conf: "false"
          enable-bpf-clock-probe: "false"
          # If you want cilium monitor to aggregate tracing for packets, set this level
          # to "low", "medium", or "maximum". The higher the level, the less packets
          # that will be seen in monitor output.
          monitor-aggregation: medium

          # The monitor aggregation interval governs the typical time between monitor
          # notification events for each allowed connection.
          #
          # Only effective when monitor aggregation is set to "medium" or higher.
          monitor-aggregation-interval: "5s"

          # The monitor aggregation flags determine which TCP flags which, upon the
          # first observation, cause monitor notifications to be generated.
          #
          # Only effective when monitor aggregation is set to "medium" or higher.
          monitor-aggregation-flags: all
          # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
          # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
          bpf-map-dynamic-size-ratio: "0.0025"
          # bpf-policy-map-max specifies the maximum number of entries in endpoint
          # policy map (per endpoint)
          bpf-policy-map-max: "16384"
          # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
          # backend and affinity maps.
          bpf-lb-map-max: "65536"
          bpf-lb-external-clusterip: "false"
          bpf-lb-source-range-all-types: "false"
          bpf-lb-algorithm-annotation: "false"
          bpf-lb-mode-annotation: "false"

          bpf-distributed-lru: "false"
          bpf-events-drop-enabled: "true"
          bpf-events-policy-verdict-enabled: "true"
          bpf-events-trace-enabled: "true"

          # Pre-allocation of map entries allows per-packet latency to be reduced, at
          # the expense of up-front memory allocation for the entries in the maps. The
          # default value below will minimize memory usage in the default installation;
          # users who are sensitive to latency may consider setting this to "true".
          #
          # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
          # this option and behave as though it is set to "true".
          #
          # If this value is modified, then during the next Cilium startup the restore
          # of existing endpoints and tracking of ongoing connections may be disrupted.
          # As a result, reply packets may be dropped and the load-balancing decisions
          # for established connections may change.
          #
          # If this option is set to "false" during an upgrade from 1.3 or earlier to
          # 1.4 or later, then it may cause one-time disruptions during the upgrade.
          preallocate-bpf-maps: "false"

          # Name of the cluster. Only relevant when building a mesh of clusters.
          cluster-name: default
          # Unique ID of the cluster. Must be unique across all conneted clusters and
          # in the range of 1 and 255. Only relevant when building a mesh of clusters.
          cluster-id: "0"

          # Encapsulation mode for communication between nodes
          # Possible values:
          #   - disabled
          #   - vxlan (default)
          #   - geneve

          routing-mode: "tunnel"
          tunnel-protocol: "vxlan"
          tunnel-source-port-range: "0-0"
          service-no-backend-response: "reject"


          # Enables L7 proxy for L7 policy enforcement and visibility
          enable-l7-proxy: "true"

          enable-ipv4-masquerade: "true"
          enable-ipv4-big-tcp: "false"
          enable-ipv6-big-tcp: "false"
          enable-ipv6-masquerade: "true"
          enable-tcx: "true"
          datapath-mode: "veth"
          enable-masquerade-to-route-source: "false"

          enable-xt-socket-fallback: "true"
          install-no-conntrack-iptables-rules: "false"
          iptables-random-fully: "false"

          auto-direct-node-routes: "false"
          direct-routing-skip-unreachable: "false"
          enable-local-redirect-policy: "false"
          enable-runtime-device-detection: "true"

          kube-proxy-replacement: "true"
          kube-proxy-replacement-healthz-bind-address: ""
          bpf-lb-sock: "false"
          nodeport-addresses: ""
          enable-health-check-nodeport: "true"
          enable-health-check-loadbalancer-ip: "false"
          node-port-bind-protection: "true"
          enable-auto-protect-node-port-range: "true"
          bpf-lb-acceleration: "disabled"
          enable-experimental-lb: "false"
          enable-svc-source-range-check: "true"
          enable-l2-neigh-discovery: "true"
          arping-refresh-period: "30s"
          k8s-require-ipv4-pod-cidr: "false"
          k8s-require-ipv6-pod-cidr: "false"
          enable-k8s-networkpolicy: "true"
          enable-endpoint-lockdown-on-policy-overflow: "false"
          # Tell the agent to generate and write a CNI configuration file
          write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
          cni-exclusive: "true"
          cni-log-file: "/var/run/cilium/cilium-cni.log"
          enable-endpoint-health-checking: "true"
          enable-health-checking: "true"
          health-check-icmp-failure-threshold: "3"
          enable-well-known-identities: "false"
          enable-node-selector-labels: "false"
          synchronize-k8s-nodes: "true"
          operator-api-serve-addr: "127.0.0.1:9234"

          enable-hubble: "true"
          # UNIX domain socket for Hubble server to listen to.
          hubble-socket-path: "/var/run/cilium/hubble.sock"
          hubble-export-file-max-size-mb: "10"
          hubble-export-file-max-backups: "5"
          # An additional address for Hubble server to listen to (e.g. ":4244").
          hubble-listen-address: ":4244"
          hubble-disable-tls: "false"
          hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
          hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
          hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
          ipam: "kubernetes"
          ipam-cilium-node-update-rate: "15s"

          default-lb-service-ipam: "lbipam"
          egress-gateway-reconciliation-trigger-interval: "1s"
          enable-vtep: "false"
          vtep-endpoint: ""
          vtep-cidr: ""
          vtep-mask: ""
          vtep-mac: ""
          procfs: "/host/proc"
          bpf-root: "/sys/fs/bpf"
          cgroup-root: "/sys/fs/cgroup"
          enable-k8s-terminating-endpoint: "true"
          enable-sctp: "false"
          remove-cilium-node-taints: "true"
          set-cilium-node-taints: "true"
          set-cilium-is-up-condition: "true"
          unmanaged-pod-watcher-interval: "15"
          # default DNS proxy to transparent mode in non-chaining modes
          dnsproxy-enable-transparent-mode: "true"
          dnsproxy-socket-linger-timeout: "10"
          tofqdns-dns-reject-response-code: "refused"
          tofqdns-enable-dns-compression: "true"
          tofqdns-endpoint-max-ip-per-hostname: "1000"
          tofqdns-idle-connection-grace-period: "0s"
          tofqdns-max-deferred-connection-deletes: "10000"
          tofqdns-proxy-response-max-delay: "100ms"
          agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

          mesh-auth-enabled: "true"
          mesh-auth-queue-size: "1024"
          mesh-auth-rotated-identities-queue-size: "1024"
          mesh-auth-gc-interval: "5m0s"

          proxy-xff-num-trusted-hops-ingress: "0"
          proxy-xff-num-trusted-hops-egress: "0"
          proxy-connect-timeout: "2"
          proxy-initial-fetch-timeout: "30"
          proxy-max-requests-per-connection: "0"
          proxy-max-connection-duration-seconds: "0"
          proxy-idle-timeout-seconds: "60"
          proxy-max-concurrent-retries: "128"
          http-retry-count: "3"

          external-envoy-proxy: "true"
          envoy-base-id: "0"
          envoy-access-log-buffer-size: "4096"
          envoy-keep-cap-netbindservice: "false"
          max-connected-clusters: "255"
          clustermesh-enable-endpoint-sync: "false"
          clustermesh-enable-mcs-api: "false"

          nat-map-stats-entries: "32"
          nat-map-stats-interval: "30s"
          enable-internal-traffic-policy: "true"
          enable-lb-ipam: "true"
          enable-non-default-deny-policies: "true"
          enable-source-ip-verification: "true"

        # Extra config allows adding arbitrary properties to the cilium config.
        # By putting it at the end of the ConfigMap, it's also possible to override existing properties.
        ---
        # Source: cilium/templates/cilium-envoy/configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: cilium-envoy-config
          namespace: kube-system
        data:
          # Keep the key name as bootstrap-config.json to avoid breaking changes
          bootstrap-config.json: |
            {"admin":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/admin.sock"}}},"applicationLogConfig":{"logFormat":{"textFormat":"[%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v"}},"bootstrapExtensions":[{"name":"envoy.bootstrap.internal_listener","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.bootstrap.internal_listener.v3.InternalListener"}}],"dynamicResources":{"cdsConfig":{"apiConfigSource":{"apiType":"GRPC","grpcServices":[{"envoyGrpc":{"clusterName":"xds-grpc-cilium"}}],"setNodeOnFirstMessageOnly":true,"transportApiVersion":"V3"},"initialFetchTimeout":"30s","resourceApiVersion":"V3"},"ldsConfig":{"apiConfigSource":{"apiType":"GRPC","grpcServices":[{"envoyGrpc":{"clusterName":"xds-grpc-cilium"}}],"setNodeOnFirstMessageOnly":true,"transportApiVersion":"V3"},"initialFetchTimeout":"30s","resourceApiVersion":"V3"}},"node":{"cluster":"ingress-cluster","id":"host~127.0.0.1~no-id~localdomain"},"overloadManager":{"resourceMonitors":[{"name":"envoy.resource_monitors.global_downstream_max_connections","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig","max_active_downstream_connections":"50000"}}]},"staticResources":{"clusters":[{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"ingress-cluster","type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"egress-cluster-tls","transportSocket":{"name":"cilium.tls_wrapper","typedConfig":{"@type":"type.googleapis.com/cilium.UpstreamTlsWrapperContext"}},"type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"upstreamHttpProtocolOptions":{},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"egress-cluster","type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"useDownstreamProtocolConfig":{}}}},{"circuitBreakers":{"thresholds":[{"maxRetries":128}]},"cleanupInterval":"2.500s","connectTimeout":"2s","lbPolicy":"CLUSTER_PROVIDED","name":"ingress-cluster-tls","transportSocket":{"name":"cilium.tls_wrapper","typedConfig":{"@type":"type.googleapis.com/cilium.UpstreamTlsWrapperContext"}},"type":"ORIGINAL_DST","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","commonHttpProtocolOptions":{"idleTimeout":"60s","maxConnectionDuration":"0s","maxRequestsPerConnection":0},"upstreamHttpProtocolOptions":{},"useDownstreamProtocolConfig":{}}}},{"connectTimeout":"2s","loadAssignment":{"clusterName":"xds-grpc-cilium","endpoints":[{"lbEndpoints":[{"endpoint":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/xds.sock"}}}}]}]},"name":"xds-grpc-cilium","type":"STATIC","typedExtensionProtocolOptions":{"envoy.extensions.upstreams.http.v3.HttpProtocolOptions":{"@type":"type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","explicitHttpConfig":{"http2ProtocolOptions":{}}}}},{"connectTimeout":"2s","loadAssignment":{"clusterName":"/envoy-admin","endpoints":[{"lbEndpoints":[{"endpoint":{"address":{"pipe":{"path":"/var/run/cilium/envoy/sockets/admin.sock"}}}}]}]},"name":"/envoy-admin","type":"STATIC"}],"listeners":[{"address":{"socketAddress":{"address":"0.0.0.0","portValue":9964}},"filterChains":[{"filters":[{"name":"envoy.filters.network.http_connection_manager","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager","httpFilters":[{"name":"envoy.filters.http.router","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"}}],"internalAddressConfig":{"cidrRanges":[{"addressPrefix":"10.0.0.0","prefixLen":8},{"addressPrefix":"172.16.0.0","prefixLen":12},{"addressPrefix":"192.168.0.0","prefixLen":16},{"addressPrefix":"127.0.0.1","prefixLen":32}]},"routeConfig":{"virtualHosts":[{"domains":["*"],"name":"prometheus_metrics_route","routes":[{"match":{"prefix":"/metrics"},"name":"prometheus_metrics_route","route":{"cluster":"/envoy-admin","prefixRewrite":"/stats/prometheus"}}]}]},"statPrefix":"envoy-prometheus-metrics-listener","streamIdleTimeout":"0s"}}]}],"name":"envoy-prometheus-metrics-listener"},{"address":{"socketAddress":{"address":"127.0.0.1","portValue":9878}},"filterChains":[{"filters":[{"name":"envoy.filters.network.http_connection_manager","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager","httpFilters":[{"name":"envoy.filters.http.router","typedConfig":{"@type":"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"}}],"internalAddressConfig":{"cidrRanges":[{"addressPrefix":"10.0.0.0","prefixLen":8},{"addressPrefix":"172.16.0.0","prefixLen":12},{"addressPrefix":"192.168.0.0","prefixLen":16},{"addressPrefix":"127.0.0.1","prefixLen":32}]},"routeConfig":{"virtual_hosts":[{"domains":["*"],"name":"health","routes":[{"match":{"prefix":"/healthz"},"name":"health","route":{"cluster":"/envoy-admin","prefixRewrite":"/ready"}}]}]},"statPrefix":"envoy-health-listener","streamIdleTimeout":"0s"}}]}],"name":"envoy-health-listener"}]}}
        ---
        # Source: cilium/templates/cilium-agent/clusterrole.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: cilium
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - networking.k8s.io
          resources:
          - networkpolicies
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - discovery.k8s.io
          resources:
          - endpointslices
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - namespaces
          - services
          - pods
          - endpoints
          - nodes
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - list
          - watch
          # This is used when validating policies in preflight. This will need to stay
          # until we figure out how to avoid "get" inside the preflight, and then
          # should be removed ideally.
          - get
        - apiGroups:
          - cilium.io
          resources:
          - ciliumloadbalancerippools
          - ciliumbgppeeringpolicies
          - ciliumbgpnodeconfigs
          - ciliumbgpadvertisements
          - ciliumbgppeerconfigs
          - ciliumclusterwideenvoyconfigs
          - ciliumclusterwidenetworkpolicies
          - ciliumegressgatewaypolicies
          - ciliumendpoints
          - ciliumendpointslices
          - ciliumenvoyconfigs
          - ciliumidentities
          - ciliumlocalredirectpolicies
          - ciliumnetworkpolicies
          - ciliumnodes
          - ciliumnodeconfigs
          - ciliumcidrgroups
          - ciliuml2announcementpolicies
          - ciliumpodippools
          verbs:
          - list
          - watch
        - apiGroups:
          - cilium.io
          resources:
          - ciliumidentities
          - ciliumendpoints
          - ciliumnodes
          verbs:
          - create
        - apiGroups:
          - cilium.io
          # To synchronize garbage collection of such resources
          resources:
          - ciliumidentities
          verbs:
          - update
        - apiGroups:
          - cilium.io
          resources:
          - ciliumendpoints
          verbs:
          - delete
          - get
        - apiGroups:
          - cilium.io
          resources:
          - ciliumnodes
          - ciliumnodes/status
          verbs:
          - get
          - update
        - apiGroups:
          - cilium.io
          resources:
          - ciliumendpoints/status
          - ciliumendpoints
          - ciliuml2announcementpolicies/status
          - ciliumbgpnodeconfigs/status
          verbs:
          - patch
        ---
        # Source: cilium/templates/cilium-operator/clusterrole.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: cilium-operator
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
          - list
          - watch
          # to automatically delete [core|kube]dns pods so that are starting to being
          # managed by Cilium
          - delete
        - apiGroups:
          - ""
          resources:
          - configmaps
          resourceNames:
          - cilium-config
          verbs:
          # allow patching of the configmap to set annotations
          - patch
        - apiGroups:
          - ""
          resources:
          - nodes
          verbs:
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          # To remove node taints
          - nodes
          # To set NetworkUnavailable false on startup
          - nodes/status
          verbs:
          - patch
        - apiGroups:
          - discovery.k8s.io
          resources:
          - endpointslices
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          # to perform LB IP allocation for BGP
          - services/status
          verbs:
          - update
          - patch
        - apiGroups:
          - ""
          resources:
          # to check apiserver connectivity
          - namespaces
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          # to perform the translation of a CNP that contains `ToGroup` to its endpoints
          - services
          - endpoints
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - delete
          - patch
        - apiGroups:
          - cilium.io
          resources:
          - ciliumnetworkpolicies
          - ciliumclusterwidenetworkpolicies
          verbs:
          # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
          - create
          - update
          - deletecollection
          # To update the status of the CNPs and CCNPs
          - patch
          - get
          - list
          - watch
        - apiGroups:
          - cilium.io
          resources:
          - ciliumnetworkpolicies/status
          - ciliumclusterwidenetworkpolicies/status
          verbs:
          # Update the auto-generated CNPs and CCNPs status.
          - patch
          - update
        - apiGroups:
          - cilium.io
          resources:
          - ciliumendpoints
          - ciliumidentities
          verbs:
          # To perform garbage collection of such resources
          - delete
          - list
          - watch
        - apiGroups:
          - cilium.io
          resources:
          - ciliumidentities
          verbs:
          # To synchronize garbage collection of such resources
          - update
        - apiGroups:
          - cilium.io
          resources:
          - ciliumnodes
          verbs:
          - create
          - update
          - get
          - list
          - watch
            # To perform CiliumNode garbage collector
          - delete
        - apiGroups:
          - cilium.io
          resources:
          - ciliumnodes/status
          verbs:
          - update
        - apiGroups:
          - cilium.io
          resources:
          - ciliumendpointslices
          - ciliumenvoyconfigs
          - ciliumbgppeerconfigs
          - ciliumbgpadvertisements
          - ciliumbgpnodeconfigs
          verbs:
          - create
          - update
          - get
          - list
          - watch
          - delete
          - patch
        - apiGroups:
          - cilium.io
          resources:
          - ciliumbgpclusterconfigs/status
          - ciliumbgppeerconfigs/status
          verbs:
          - update
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - create
          - get
          - list
          - watch
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - update
          resourceNames:
          - ciliumloadbalancerippools.cilium.io
          - ciliumbgppeeringpolicies.cilium.io
          - ciliumbgpclusterconfigs.cilium.io
          - ciliumbgppeerconfigs.cilium.io
          - ciliumbgpadvertisements.cilium.io
          - ciliumbgpnodeconfigs.cilium.io
          - ciliumbgpnodeconfigoverrides.cilium.io
          - ciliumclusterwideenvoyconfigs.cilium.io
          - ciliumclusterwidenetworkpolicies.cilium.io
          - ciliumegressgatewaypolicies.cilium.io
          - ciliumendpoints.cilium.io
          - ciliumendpointslices.cilium.io
          - ciliumenvoyconfigs.cilium.io
          - ciliumexternalworkloads.cilium.io
          - ciliumidentities.cilium.io
          - ciliumlocalredirectpolicies.cilium.io
          - ciliumnetworkpolicies.cilium.io
          - ciliumnodes.cilium.io
          - ciliumnodeconfigs.cilium.io
          - ciliumcidrgroups.cilium.io
          - ciliuml2announcementpolicies.cilium.io
          - ciliumpodippools.cilium.io
        - apiGroups:
          - cilium.io
          resources:
          - ciliumloadbalancerippools
          - ciliumpodippools
          - ciliumbgppeeringpolicies
          - ciliumbgpclusterconfigs
          - ciliumbgpnodeconfigoverrides
          - ciliumbgppeerconfigs
          verbs:
          - get
          - list
          - watch
        - apiGroups:
            - cilium.io
          resources:
            - ciliumpodippools
          verbs:
            - create
        - apiGroups:
          - cilium.io
          resources:
          - ciliumloadbalancerippools/status
          verbs:
          - patch
        # For cilium-operator running in HA mode.
        #
        # Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
        # between multiple running instances.
        # The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
        # common and fewer objects in the cluster watch "all Leases".
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
          - get
          - update
        - apiGroups:
          - gateway.networking.k8s.io
          resources:
          - gatewayclasses
          - gateways
          - tlsroutes
          - httproutes
          - grpcroutes
          - referencegrants
          - referencepolicies
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - gateway.networking.k8s.io
          resources:
          - gatewayclasses/status
          - gateways/status
          - httproutes/status
          - grpcroutes/status
          - tlsroutes/status
          verbs:
          - update
          - patch
        - apiGroups:
          - multicluster.x-k8s.io
          resources:
          - serviceimports
          verbs:
          - get
          - list
          - watch
        ---
        # Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: cilium
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cilium
        subjects:
        - kind: ServiceAccount
          name: "cilium"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: cilium-operator
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cilium-operator
        subjects:
        - kind: ServiceAccount
          name: "cilium-operator"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-agent/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: cilium-config-agent
          namespace: kube-system
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
        ---
        # Source: cilium/templates/cilium-agent/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: cilium-gateway-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        ---
        # Source: cilium/templates/cilium-agent/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: cilium-tlsinterception-secrets
          namespace: "cilium-secrets"  
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        ---
        # Source: cilium/templates/cilium-operator/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: cilium-operator-gateway-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - create
          - delete
          - update
          - patch
        ---
        # Source: cilium/templates/cilium-operator/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: cilium-operator-tlsinterception-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - create
          - delete
          - update
          - patch
        ---
        # Source: cilium/templates/cilium-agent/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: cilium-config-agent
          namespace: kube-system
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: cilium-config-agent
        subjects:
          - kind: ServiceAccount
            name: "cilium"
            namespace: kube-system
        ---
        # Source: cilium/templates/cilium-agent/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: cilium-gateway-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: cilium-gateway-secrets
        subjects:
        - kind: ServiceAccount
          name: "cilium"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-agent/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: cilium-tlsinterception-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: cilium-tlsinterception-secrets
        subjects:
        - kind: ServiceAccount
          name: "cilium"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-operator/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: cilium-operator-gateway-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: cilium-operator-gateway-secrets
        subjects:
        - kind: ServiceAccount
          name: "cilium-operator"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-operator/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: cilium-operator-tlsinterception-secrets
          namespace: "cilium-secrets"
          labels:
            app.kubernetes.io/part-of: cilium
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: cilium-operator-tlsinterception-secrets
        subjects:
        - kind: ServiceAccount
          name: "cilium-operator"
          namespace: kube-system
        ---
        # Source: cilium/templates/cilium-envoy/service.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name: cilium-envoy
          namespace: kube-system
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "9964"
          labels:
            k8s-app: cilium-envoy
            app.kubernetes.io/name: cilium-envoy
            app.kubernetes.io/part-of: cilium
            io.cilium/app: proxy
        spec:
          clusterIP: None
          type: ClusterIP
          selector:
            k8s-app: cilium-envoy
          ports:
          - name: envoy-metrics
            port: 9964
            protocol: TCP
            targetPort: envoy-metrics
        ---
        # Source: cilium/templates/hubble/peer-service.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name: hubble-peer
          namespace: kube-system
          labels:
            k8s-app: cilium
            app.kubernetes.io/part-of: cilium
            app.kubernetes.io/name: hubble-peer

        spec:
          selector:
            k8s-app: cilium
          ports:
          - name: peer-service
            port: 443
            protocol: TCP
            targetPort: 4244
          internalTrafficPolicy: Local
        ---
        # Source: cilium/templates/cilium-agent/daemonset.yaml
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: cilium
          namespace: kube-system
          labels:
            k8s-app: cilium
            app.kubernetes.io/part-of: cilium
            app.kubernetes.io/name: cilium-agent
        spec:
          selector:
            matchLabels:
              k8s-app: cilium
          updateStrategy:
            rollingUpdate:
              maxUnavailable: 2
            type: RollingUpdate
          template:
            metadata:
              annotations:
              labels:
                k8s-app: cilium
                app.kubernetes.io/name: cilium-agent
                app.kubernetes.io/part-of: cilium
            spec:
              securityContext:
                appArmorProfile:
                  type: Unconfined
              containers:
              - name: cilium-agent
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                command:
                - cilium-agent
                args:
                - --config-dir=/tmp/cilium/config-map
                startupProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9879
                    scheme: HTTP
                    httpHeaders:
                    - name: "brief"
                      value: "true"
                  failureThreshold: 105
                  periodSeconds: 2
                  successThreshold: 1
                  initialDelaySeconds: 5
                livenessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9879
                    scheme: HTTP
                    httpHeaders:
                    - name: "brief"
                      value: "true"
                    - name: "require-k8s-connectivity"
                      value: "false"
                  periodSeconds: 30
                  successThreshold: 1
                  failureThreshold: 10
                  timeoutSeconds: 5
                readinessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9879
                    scheme: HTTP
                    httpHeaders:
                    - name: "brief"
                      value: "true"
                  periodSeconds: 30
                  successThreshold: 1
                  failureThreshold: 3
                  timeoutSeconds: 5
                env:
                - name: K8S_NODE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: CILIUM_K8S_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: CILIUM_CLUSTERMESH_CONFIG
                  value: /var/lib/cilium/clustermesh/
                - name: GOMEMLIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.memory
                      divisor: '1'
                - name: KUBERNETES_SERVICE_HOST
                  value: "localhost"
                - name: KUBERNETES_SERVICE_PORT
                  value: "7445"
                lifecycle:
                  postStart:
                    exec:
                      command:
                      - "bash"
                      - "-c"
                      - |
                            set -o errexit
                            set -o pipefail
                            set -o nounset
                            
                            # When running in AWS ENI mode, it's likely that 'aws-node' has
                            # had a chance to install SNAT iptables rules. These can result
                            # in dropped traffic, so we should attempt to remove them.
                            # We do it using a 'postStart' hook since this may need to run
                            # for nodes which might have already been init'ed but may still
                            # have dangling rules. This is safe because there are no
                            # dependencies on anything that is part of the startup script
                            # itself, and can be safely run multiple times per node (e.g. in
                            # case of a restart).
                            if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                            then
                                echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                                iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                            fi
                            echo 'Done!'
                            
                  preStop:
                    exec:
                      command:
                      - /cni-uninstall.sh
                securityContext:
                  seLinuxOptions:
                    level: s0
                    type: spc_t
                  capabilities:
                    add:
                      - CHOWN
                      - KILL
                      - NET_ADMIN
                      - NET_RAW
                      - IPC_LOCK
                      - SYS_ADMIN
                      - SYS_RESOURCE
                      - DAC_OVERRIDE
                      - FOWNER
                      - SETGID
                      - SETUID
                    drop:
                      - ALL
                terminationMessagePolicy: FallbackToLogsOnError
                volumeMounts:
                - name: envoy-sockets
                  mountPath: /var/run/cilium/envoy/sockets
                  readOnly: false
                # Unprivileged containers need to mount /proc/sys/net from the host
                # to have write access
                - mountPath: /host/proc/sys/net
                  name: host-proc-sys-net
                # Unprivileged containers need to mount /proc/sys/kernel from the host
                # to have write access
                - mountPath: /host/proc/sys/kernel
                  name: host-proc-sys-kernel
                - name: bpf-maps
                  mountPath: /sys/fs/bpf
                  # Unprivileged containers can't set mount propagation to bidirectional
                  # in this case we will mount the bpf fs from an init container that
                  # is privileged and set the mount propagation from host to container
                  # in Cilium.
                  mountPropagation: HostToContainer
                # Check for duplicate mounts before mounting
                - name: cilium-cgroup
                  mountPath: /sys/fs/cgroup
                - name: cilium-run
                  mountPath: /var/run/cilium
                - name: cilium-netns
                  mountPath: /var/run/cilium/netns
                  mountPropagation: HostToContainer
                - name: etc-cni-netd
                  mountPath: /host/etc/cni/net.d
                - name: clustermesh-secrets
                  mountPath: /var/lib/cilium/clustermesh
                  readOnly: true
                  # Needed to be able to load kernel modules
                - name: lib-modules
                  mountPath: /lib/modules
                  readOnly: true
                - name: xtables-lock
                  mountPath: /run/xtables.lock
                - name: hubble-tls
                  mountPath: /var/lib/cilium/tls/hubble
                  readOnly: true
                - name: tmp
                  mountPath: /tmp
              initContainers:
              - name: config
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                command:
                - cilium-dbg
                - build-config
                env:
                - name: K8S_NODE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: CILIUM_K8S_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: KUBERNETES_SERVICE_HOST
                  value: "localhost"
                - name: KUBERNETES_SERVICE_PORT
                  value: "7445"
                volumeMounts:
                - name: tmp
                  mountPath: /tmp
                terminationMessagePolicy: FallbackToLogsOnError
              - name: apply-sysctl-overwrites
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                env:
                - name: BIN_PATH
                  value: /opt/cni/bin
                command:
                - sh
                - -ec
                # The statically linked Go program binary is invoked to avoid any
                # dependency on utilities like sh that can be missing on certain
                # distros installed on the underlying host. Copy the binary to the
                # same directory where we install cilium cni plugin so that exec permissions
                # are available.
                - |
                  cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
                  nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
                  rm /hostbin/cilium-sysctlfix
                volumeMounts:
                - name: hostproc
                  mountPath: /hostproc
                - name: cni-path
                  mountPath: /hostbin
                terminationMessagePolicy: FallbackToLogsOnError
                securityContext:
                  seLinuxOptions:
                    level: s0
                    type: spc_t
                  capabilities:
                    add:
                      - SYS_ADMIN
                      - SYS_CHROOT
                      - SYS_PTRACE
                    drop:
                      - ALL
              # Mount the bpf fs if it is not mounted. We will perform this task
              # from a privileged container because the mount propagation bidirectional
              # only works from privileged containers.
              - name: mount-bpf-fs
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                args:
                - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
                command:
                - /bin/bash
                - -c
                - --
                terminationMessagePolicy: FallbackToLogsOnError
                securityContext:
                  privileged: true
                volumeMounts:
                - name: bpf-maps
                  mountPath: /sys/fs/bpf
                  mountPropagation: Bidirectional
              - name: clean-cilium-state
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                command:
                - /init-container.sh
                env:
                - name: CILIUM_ALL_STATE
                  valueFrom:
                    configMapKeyRef:
                      name: cilium-config
                      key: clean-cilium-state
                      optional: true
                - name: CILIUM_BPF_STATE
                  valueFrom:
                    configMapKeyRef:
                      name: cilium-config
                      key: clean-cilium-bpf-state
                      optional: true
                - name: WRITE_CNI_CONF_WHEN_READY
                  valueFrom:
                    configMapKeyRef:
                      name: cilium-config
                      key: write-cni-conf-when-ready
                      optional: true
                - name: KUBERNETES_SERVICE_HOST
                  value: "localhost"
                - name: KUBERNETES_SERVICE_PORT
                  value: "7445"
                terminationMessagePolicy: FallbackToLogsOnError
                securityContext:
                  seLinuxOptions:
                    level: s0
                    type: spc_t
                  capabilities:
                    add:
                      - NET_ADMIN
                      - SYS_ADMIN
                      - SYS_RESOURCE
                    drop:
                      - ALL
                volumeMounts:
                - name: bpf-maps
                  mountPath: /sys/fs/bpf
                  # Required to mount cgroup filesystem from the host to cilium agent pod
                - name: cilium-cgroup
                  mountPath: /sys/fs/cgroup
                  mountPropagation: HostToContainer
                - name: cilium-run
                  mountPath: /var/run/cilium # wait-for-kube-proxy
              # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
              - name: install-cni-binaries
                image: "quay.io/cilium/cilium:v1.17.4@sha256:24a73fe795351cf3279ac8e84918633000b52a9654ff73a6b0d7223bcff4a67a"
                imagePullPolicy: IfNotPresent
                command:
                  - "/install-plugin.sh"
                resources:
                  requests:
                    cpu: 100m
                    memory: 10Mi
                securityContext:
                  seLinuxOptions:
                    level: s0
                    type: spc_t
                  capabilities:
                    drop:
                      - ALL
                terminationMessagePolicy: FallbackToLogsOnError
                volumeMounts:
                  - name: cni-path
                    mountPath: /host/opt/cni/bin # .Values.cni.install
              restartPolicy: Always
              priorityClassName: system-node-critical
              serviceAccountName: "cilium"
              automountServiceAccountToken: true
              terminationGracePeriodSeconds: 1
              hostNetwork: true
              affinity:
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        k8s-app: cilium
                    topologyKey: kubernetes.io/hostname
              nodeSelector:
                kubernetes.io/os: linux
              tolerations:
                - operator: Exists
              volumes:
                # For sharing configuration between the "config" initContainer and the agent
              - name: tmp
                emptyDir: {}
                # To keep state between restarts / upgrades
              - name: cilium-run
                hostPath:
                  path: /var/run/cilium
                  type: DirectoryOrCreate
                # To exec into pod network namespaces
              - name: cilium-netns
                hostPath:
                  path: /var/run/netns
                  type: DirectoryOrCreate
                # To keep state between restarts / upgrades for bpf maps
              - name: bpf-maps
                hostPath:
                  path: /sys/fs/bpf
                  type: DirectoryOrCreate
              # To mount cgroup2 filesystem on the host or apply sysctlfix
              - name: hostproc
                hostPath:
                  path: /proc
                  type: Directory
              # To keep state between restarts / upgrades for cgroup2 filesystem
              - name: cilium-cgroup
                hostPath:
                  path: /sys/fs/cgroup
                  type: DirectoryOrCreate
              # To install cilium cni plugin in the host
              - name: cni-path
                hostPath:
                  path:  /opt/cni/bin
                  type: DirectoryOrCreate
                # To install cilium cni configuration in the host
              - name: etc-cni-netd
                hostPath:
                  path: /etc/cni/net.d
                  type: DirectoryOrCreate
                # To be able to load kernel modules
              - name: lib-modules
                hostPath:
                  path: /lib/modules
                # To access iptables concurrently with other processes (e.g. kube-proxy)
              - name: xtables-lock
                hostPath:
                  path: /run/xtables.lock
                  type: FileOrCreate
              # Sharing socket with Cilium Envoy on the same node by using a host path
              - name: envoy-sockets
                hostPath:
                  path: "/var/run/cilium/envoy/sockets"
                  type: DirectoryOrCreate
                # To read the clustermesh configuration
              - name: clustermesh-secrets
                projected:
                  # note: the leading zero means this number is in octal representation: do not remove it
                  defaultMode: 0400
                  sources:
                  - secret:
                      name: cilium-clustermesh
                      optional: true
                      # note: items are not explicitly listed here, since the entries of this secret
                      # depend on the peers configured, and that would cause a restart of all agents
                      # at every addition/removal. Leaving the field empty makes each secret entry
                      # to be automatically projected into the volume as a file whose name is the key.
                  - secret:
                      name: clustermesh-apiserver-remote-cert
                      optional: true
                      items:
                      - key: tls.key
                        path: common-etcd-client.key
                      - key: tls.crt
                        path: common-etcd-client.crt
                      - key: ca.crt
                        path: common-etcd-client-ca.crt
                  # note: we configure the volume for the kvstoremesh-specific certificate
                  # regardless of whether KVStoreMesh is enabled or not, so that it can be
                  # automatically mounted in case KVStoreMesh gets subsequently enabled,
                  # without requiring an agent restart.
                  - secret:
                      name: clustermesh-apiserver-local-cert
                      optional: true
                      items:
                      - key: tls.key
                        path: local-etcd-client.key
                      - key: tls.crt
                        path: local-etcd-client.crt
                      - key: ca.crt
                        path: local-etcd-client-ca.crt
              - name: host-proc-sys-net
                hostPath:
                  path: /proc/sys/net
                  type: Directory
              - name: host-proc-sys-kernel
                hostPath:
                  path: /proc/sys/kernel
                  type: Directory
              - name: hubble-tls
                projected:
                  # note: the leading zero means this number is in octal representation: do not remove it
                  defaultMode: 0400
                  sources:
                  - secret:
                      name: hubble-server-certs
                      optional: true
                      items:
                      - key: tls.crt
                        path: server.crt
                      - key: tls.key
                        path: server.key
                      - key: ca.crt
                        path: client-ca.crt
        ---
        # Source: cilium/templates/cilium-envoy/daemonset.yaml
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: cilium-envoy
          namespace: kube-system
          labels:
            k8s-app: cilium-envoy
            app.kubernetes.io/part-of: cilium
            app.kubernetes.io/name: cilium-envoy
            name: cilium-envoy
        spec:
          selector:
            matchLabels:
              k8s-app: cilium-envoy
          updateStrategy:
            rollingUpdate:
              maxUnavailable: 2
            type: RollingUpdate
          template:
            metadata:
              annotations:
              labels:
                k8s-app: cilium-envoy
                name: cilium-envoy
                app.kubernetes.io/name: cilium-envoy
                app.kubernetes.io/part-of: cilium
            spec:
              securityContext:
                appArmorProfile:
                  type: Unconfined
              containers:
              - name: cilium-envoy
                image: "quay.io/cilium/cilium-envoy:v1.32.6-1746661844-0f602c28cb2aa57b29078195049fb257d5b5246c@sha256:a04218c6879007d60d96339a441c448565b6f86650358652da27582e0efbf182"
                imagePullPolicy: IfNotPresent
                command:
                - /usr/bin/cilium-envoy-starter
                args:
                - '--'
                - '-c /var/run/cilium/envoy/bootstrap-config.json'
                - '--base-id 0'
                - '--log-level info'
                startupProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9878
                    scheme: HTTP
                  failureThreshold: 105
                  periodSeconds: 2
                  successThreshold: 1
                  initialDelaySeconds: 5
                livenessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9878
                    scheme: HTTP
                  periodSeconds: 30
                  successThreshold: 1
                  failureThreshold: 10
                  timeoutSeconds: 5
                readinessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9878
                    scheme: HTTP
                  periodSeconds: 30
                  successThreshold: 1
                  failureThreshold: 3
                  timeoutSeconds: 5
                env:
                - name: K8S_NODE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: CILIUM_K8S_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: KUBERNETES_SERVICE_HOST
                  value: "localhost"
                - name: KUBERNETES_SERVICE_PORT
                  value: "7445"
                ports:
                - name: envoy-metrics
                  containerPort: 9964
                  hostPort: 9964
                  protocol: TCP
                securityContext:
                  seLinuxOptions:
                    level: s0
                    type: spc_t
                  capabilities:
                    add:
                      - NET_ADMIN
                      - SYS_ADMIN
                    drop:
                      - ALL
                terminationMessagePolicy: FallbackToLogsOnError
                volumeMounts:
                - name: envoy-sockets
                  mountPath: /var/run/cilium/envoy/sockets
                  readOnly: false
                - name: envoy-artifacts
                  mountPath: /var/run/cilium/envoy/artifacts
                  readOnly: true
                - name: envoy-config
                  mountPath: /var/run/cilium/envoy/
                  readOnly: true
                - name: bpf-maps
                  mountPath: /sys/fs/bpf
                  mountPropagation: HostToContainer
              restartPolicy: Always
              priorityClassName: system-node-critical
              serviceAccountName: "cilium-envoy"
              automountServiceAccountToken: true
              terminationGracePeriodSeconds: 1
              hostNetwork: true
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: cilium.io/no-schedule
                        operator: NotIn
                        values:
                        - "true"
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        k8s-app: cilium
                    topologyKey: kubernetes.io/hostname
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        k8s-app: cilium-envoy
                    topologyKey: kubernetes.io/hostname
              nodeSelector:
                kubernetes.io/os: linux
              tolerations:
                - operator: Exists
              volumes:
              - name: envoy-sockets
                hostPath:
                  path: "/var/run/cilium/envoy/sockets"
                  type: DirectoryOrCreate
              - name: envoy-artifacts
                hostPath:
                  path: "/var/run/cilium/envoy/artifacts"
                  type: DirectoryOrCreate
              - name: envoy-config
                configMap:
                  name: "cilium-envoy-config"
                  # note: the leading zero means this number is in octal representation: do not remove it
                  defaultMode: 0400
                  items:
                    - key: bootstrap-config.json
                      path: bootstrap-config.json
                # To keep state between restarts / upgrades
                # To keep state between restarts / upgrades for bpf maps
              - name: bpf-maps
                hostPath:
                  path: /sys/fs/bpf
                  type: DirectoryOrCreate
        ---
        # Source: cilium/templates/cilium-operator/deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: cilium-operator
          namespace: kube-system
          labels:
            io.cilium/app: operator
            name: cilium-operator
            app.kubernetes.io/part-of: cilium
            app.kubernetes.io/name: cilium-operator
        spec:
          # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
          # for more details.
          replicas: 2
          selector:
            matchLabels:
              io.cilium/app: operator
              name: cilium-operator
          # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
          # of one replica and no user configured Recreate strategy.
          # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
          # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 50%
            type: RollingUpdate
          template:
            metadata:
              annotations:
                prometheus.io/port: "9963"
                prometheus.io/scrape: "true"
              labels:
                io.cilium/app: operator
                name: cilium-operator
                app.kubernetes.io/part-of: cilium
                app.kubernetes.io/name: cilium-operator
            spec:
              containers:
              - name: cilium-operator
                image: "quay.io/cilium/operator-generic:v1.17.4@sha256:a3906412f477b09904f46aac1bed28eb522bef7899ed7dd81c15f78b7aa1b9b5"
                imagePullPolicy: IfNotPresent
                command:
                - cilium-operator-generic
                args:
                - --config-dir=/tmp/cilium/config-map
                - --debug=$(CILIUM_DEBUG)
                env:
                - name: K8S_NODE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: CILIUM_K8S_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: CILIUM_DEBUG
                  valueFrom:
                    configMapKeyRef:
                      key: debug
                      name: cilium-config
                      optional: true
                - name: KUBERNETES_SERVICE_HOST
                  value: "localhost"
                - name: KUBERNETES_SERVICE_PORT
                  value: "7445"
                ports:
                - name: prometheus
                  containerPort: 9963
                  hostPort: 9963
                  protocol: TCP
                livenessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9234
                    scheme: HTTP
                  initialDelaySeconds: 60
                  periodSeconds: 10
                  timeoutSeconds: 3
                readinessProbe:
                  httpGet:
                    host: "127.0.0.1"
                    path: /healthz
                    port: 9234
                    scheme: HTTP
                  initialDelaySeconds: 0
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 5
                volumeMounts:
                - name: cilium-config-path
                  mountPath: /tmp/cilium/config-map
                  readOnly: true
                terminationMessagePolicy: FallbackToLogsOnError
              hostNetwork: true
              restartPolicy: Always
              priorityClassName: system-cluster-critical
              serviceAccountName: "cilium-operator"
              automountServiceAccountToken: true
              # In HA mode, cilium-operator pods must not be scheduled on the same
              # node as they will clash with each other.
              affinity:
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        io.cilium/app: operator
                    topologyKey: kubernetes.io/hostname
              nodeSelector:
                kubernetes.io/os: linux
              tolerations:
                - operator: Exists
              volumes:
                # To read the configuration from the config map
              - name: cilium-config-path
                configMap:
                  name: cilium-config
